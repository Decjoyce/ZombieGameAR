//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/FPSZOMBIE/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BaseControls"",
            ""id"": ""6f1ce699-bf9d-47c1-b884-59d687f2cfb9"",
            ""actions"": [
                {
                    ""name"": ""SingleTouch"",
                    ""type"": ""Button"",
                    ""id"": ""baa29b1b-2162-4c3d-9c8c-8ae9d730ea84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70dbf2f5-634d-4f52-ba6e-e8772d859d7b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SingleTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BaseControls
        m_BaseControls = asset.FindActionMap("BaseControls", throwIfNotFound: true);
        m_BaseControls_SingleTouch = m_BaseControls.FindAction("SingleTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseControls
    private readonly InputActionMap m_BaseControls;
    private List<IBaseControlsActions> m_BaseControlsActionsCallbackInterfaces = new List<IBaseControlsActions>();
    private readonly InputAction m_BaseControls_SingleTouch;
    public struct BaseControlsActions
    {
        private @PlayerControls m_Wrapper;
        public BaseControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SingleTouch => m_Wrapper.m_BaseControls_SingleTouch;
        public InputActionMap Get() { return m_Wrapper.m_BaseControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseControlsActions set) { return set.Get(); }
        public void AddCallbacks(IBaseControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseControlsActionsCallbackInterfaces.Add(instance);
            @SingleTouch.started += instance.OnSingleTouch;
            @SingleTouch.performed += instance.OnSingleTouch;
            @SingleTouch.canceled += instance.OnSingleTouch;
        }

        private void UnregisterCallbacks(IBaseControlsActions instance)
        {
            @SingleTouch.started -= instance.OnSingleTouch;
            @SingleTouch.performed -= instance.OnSingleTouch;
            @SingleTouch.canceled -= instance.OnSingleTouch;
        }

        public void RemoveCallbacks(IBaseControlsActions instance)
        {
            if (m_Wrapper.m_BaseControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseControlsActions @BaseControls => new BaseControlsActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IBaseControlsActions
    {
        void OnSingleTouch(InputAction.CallbackContext context);
    }
}
